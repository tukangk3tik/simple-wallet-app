// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  deletedAt    DateTime?
  UserAccounts UserAccounts[]
  Transaction  Transaction[]
}

model AccountType {
  id              Int            @id @default(autoincrement())
  accountTypeName String
  UserAccounts    UserAccounts[]
  Transaction     Transaction[]
}

model UserAccounts {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  accountType   AccountType   @relation(fields: [accountTypeId], references: [id])
  accountTypeId Int
  address       String        @unique
  balance       Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  deletedAt     DateTime?
  Transaction   Transaction[]
}

model Transaction {
  id              Int          @id @default(autoincrement())
  transaction_id  String       @unique
  userAccount     UserAccounts @relation(fields: [userAccountId], references: [id])
  userAccountId   Int
  user            User         @relation(fields: [userId], references: [id])
  userId          Int
  accountType     AccountType  @relation(fields: [accountTypeId], references: [id])
  accountTypeId   Int
  amount          Float
  fromAddress     String
  toAddress       String
  transactionTime DateTime
  finishTime      DateTime?
  status          String
  message         String
}
